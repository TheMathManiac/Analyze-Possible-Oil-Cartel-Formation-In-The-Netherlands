import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression as LR
import statsmodels.api as sm
import seaborn as sns
import pylab as py
import sys

###############################################################################################################################################################################

(PART A) 

###############################################################################################################################################################################

#We import the raw, unfiltered CSV data file. This contains oil price and sales data for different regions, for both companies (Schelp and CP) in The Netherlands

def importdata():
    fn = '/Users/markv/Downloads/pyhton/Cartel_data-3.xlsx'
    data = pd.read_excel(fn)
    return data
    

###############################################################################################################################################################################

#We can select the relevant sales and price data we need based on location, company, and fuel product.

def main():
    ProgramLocation = 'Yes'
    location = 'Hollands Kroon'
    company1 = 'CP'
    company2 = 'CP'
    companyPrice = f'Price_{company1}'
    companySales = f'Sales_{company2}'
    product = 'Diesel'
    data = importdata()
    
    if ProgramLocation == 'Yes':
        try:
            selectstatisticsLocation(data, companyPrice, companySales, product, company1, company2, location)
            compareCompanies(data, product, company1, company2)
        
        except Exception as e:
            print("There is no price data for this region, please enter another region")
            
    
    if ProgramLocation == 'No':
        selectstatisticsNoLocation(data, companyPrice, companySales, product, company1, company2)
        compareCompanies(data, product, company1, company2)
        
        
###############################################################################################################################################################################      
 
#This function compares the sales for any given product (ùê∏ùë¢ùëüùëú, ùëÜùë¢ùëùùëíùëü or ùê∑ùëñùëíùë†ùëíùëô), from both ùëÜùëê‚Ñéùëíùëôùëù and ùê∂ùëÉ.
        
def compareCompanies(data, product, company1, company2):
    SalesData = data[['Sales_CP', 'Product', 'Sales_Schelp']]
    SalesDataNew = SalesData[SalesData.Product == product]
    SalesDataFinal = SalesDataNew[['Sales_CP', 'Sales_Schelp']]
    SalesDataGraphData = SalesDataFinal.dropna()
    print(SalesDataGraphData)
    SalesOneVector = SalesDataGraphData['Sales_CP'].values.reshape(-1,1)
    SalesTwoVector = SalesDataGraphData['Sales_Schelp'].values.reshape(-1,1)
    print(SalesDataGraphData['Sales_CP'].corr(SalesDataGraphData['Sales_Schelp']))
    plotCompareCompaniesSales(SalesOneVector, SalesTwoVector, product, company1, company2)   
    
        
###############################################################################################################################################################################       

#This functions plots the Sales of ùëÜùëê‚Ñéùëíùëôùëù and ùê∂ùëÉ for the chosen product.

def plotCompareCompaniesSales(SalesOneVector, SalesTwoVector, product, company1, company2):    
    plt.scatter(SalesOneVector, SalesTwoVector, label = 'Diesel Sales', alpha = 0.5)
    plt.title(f'{product} Sales ({company1}) Against {product} Sales ({company2})')
    plt.xlabel(f'Sales Of {product} {company1}')
    plt.ylabel(f'Sales Of {product} {company2}')
    plt.legend()
    plt.show()   
    

###############################################################################################################################################################################
 
 #This function determines the linear regression model (when location is needed) for sales against price, and calculates the corresponding regression coefficient and intercept. 
 
 def calculatestatisticsLocation(CompanyDataProductRelevant, companyPrice, companySales, product, company1, company2, location):
    PriceVector = CompanyDataProductRelevant[companyPrice].values.reshape(-1,1)
    SalesVector = CompanyDataProductRelevant[companySales].values.reshape(-1,1)
    LinearRegression = LR().fit(PriceVector, SalesVector)
    SalesPrediction = LinearRegression.predict(PriceVector)
    print('The value of the linear regression coefficient: %f' %LinearRegression.coef_)
    print('The value of the linear regression intercept: %f' %LinearRegression.intercept_)
    ols(PriceVector, SalesVector, product,company1)
    plotPriceAgainstSalesLocation(PriceVector, SalesVector, SalesPrediction, product, company1, company2, location)
    
 
 ###############################################################################################################################################################################

#This function determines the linear regression model (when no location is needed) for sales and price, and calculates the corresponding regression coefficient and intercept.

def calculatestatisticsNoLocation(CompanyDataProductRelevant, companyPrice, companySales, product, company1, company2):
    PriceVector = CompanyDataProductRelevant[companyPrice].values.reshape(-1,1)
    SalesVector = CompanyDataProductRelevant[companySales].values.reshape(-1,1)
    LinearRegression = LR().fit(PriceVector, SalesVector)
    SalesPrediction = LinearRegression.predict(PriceVector)
    print('The value of the linear regression coefficient: %f' %LinearRegression.coef_)
    print('The value of the linear regression intercept: %f' %LinearRegression.intercept_)
    ols(PriceVector, SalesVector, product,company1)
    plotPriceAgainstSalesNoLocation(PriceVector, SalesVector, SalesPrediction, product, company1, company2)


###############################################################################################################################################################################

#This function implements OLS (Ordinary Least Squares) which can be used to calculate several statistics about the linear regression model.
#We use it to determine a best linear unbiased estimator of  ùõΩùëú  and  ùõΩ1 .

def ols(pv, sv, product, company1):
    PriceVectorConstant = sm.add_constant(pv)
    modelOLS = sm.OLS(sv, PriceVectorConstant)
    resultsOLS = modelOLS.fit()
    PredictedSales = resultsOLS.predict(PriceVectorConstant)
    print(resultsOLS.summary())
   
    residuals = resultsOLS.resid
    sm.qqplot(residuals,fit=True, line='45')
    plt.title(f"Q-Q-Plot of {product} for {company1}")
    plt.show()
    
    plt.hist(residuals, edgecolor='w', linewidth=0.5, bins = 10, density=True)
    sns.kdeplot(residuals)
    plt.ylabel('Relative Frequency')
    plt.xlabel('Residuals')
    plt.title(f"Distribution Of Residuals of {product} for {company1}")
    plt.show()
    
    mean = residuals.mean()
    std = residuals.std()
    standardized = (residuals-mean)/std
    
    sns.set_theme(style="whitegrid")
    sns.residplot(pv, standardized, lowess=True, color="g")
    plt.title(f"Residual Plot of {product} for {company1}")
    plt.ylabel('Standardized Residuals')
    plt.xlabel(f'Price of {product} for {company1}')
    plt.show() 
    

###############################################################################################################################################################################

def plotPriceAgainstSalesLocation(pv, sv, dsp, product, company1, company2, location):
    plt.scatter(pv, sv, label = 'Sales vs Price', alpha = 0.5)
    plt.plot(pv, dsp, color = 'red', label = 'OLS Analysis')
    plt.title(f'Price Of {product} Against {product} Sales For {company1} in {location}')
    plt.xlabel(f'Price Of {product}')
    plt.ylabel(f'Sales Of {product}')
    plt.legend()
    plt.show()
    
    plt.savefig('output.png', dpi=300)


###############################################################################################################################################################################
 
 #This function is used when no location is needed and selects data based on product, price and sales.

 def selectstatisticsNoLocation(data, companyPrice, companySales, product, company1, company2):
    CompanyData = data[[companyPrice, companySales, 'Product']]
    CompanyDataProduct = CompanyData[CompanyData.Product == product]
    CompanyDataProductRelevant = CompanyDataProduct.dropna() 
    print(CompanyDataProductRelevant)
    calculatestatisticsNoLocation(CompanyDataProductRelevant, companyPrice, companySales, product, company1, company2)
    
    
###############################################################################################################################################################################
  
  #This function is used when a location is needed and selects data based on product, price and sales. 
  
  def selectstatisticsLocation(data, companyPrice, companySales, product, company1, company2, location):
    CompanyData = data[['Municipality', companyPrice, companySales, 'Product']]
    CompanyDataLocation = CompanyData[CompanyData.Municipality == location]
    CompanyDataProduct = CompanyDataLocation[CompanyDataLocation.Product == product]
    #CompanyDataProduct = CompanyData[CompanyData.Product == product]
    CompanyDataProductRelevant = CompanyDataProduct.dropna() ##dropna is a tool that drops a data point if that point does not contain data
    print(CompanyDataProductRelevant)
    calculatestatisticsLocation(CompanyDataProductRelevant, companyPrice, companySales, product, company1, company2, location)
  
###############################################################################################################################################################################

(PART B)

###############################################################################################################################################################################

#Notice that magic numbers do not have a fixed value. 
#These values depend on the choice of the product and company. The values that need to be used can be found in the OLS summary table from PART A.

def main():
    # Magic Numbers
    regressionBetaOneHatCoefficient = -6.388e+04
    regressionBetaIntercept = 1.457e+05
    betaGammaRatio = 0.18 
    regression(regressionBetaOneHatCoefficient, regressionBetaIntercept, betaGammaRatio)
    

###############################################################################################################################################################################

#This function uses the  ùõΩÃÇ 1 ,  ùõΩ0 ,  ùõΩùõæ from PART A as input to calculate the adjusted Gamma, final Gamma Value and final Beta Value

def regression(regressionBetaOneHatCoefficient, regressionBetaIntercept, betaGammaRatio):
    adjustedGamma = betaGammaRatio - 1
    finalGammaValue = regressionBetaOneHatCoefficient / adjustedGamma
    finalBetaValue = finalGammaValue * betaGammaRatio
    print('The value of Gamma: %f' %finalGammaValue)
    print('The value of Beta: %f' %finalBetaValue)
    
###############################################################################################################################################################################

(PART C)

###############################################################################################################################################################################

#Firstly, we calculate many different outputs for both Schelp and CP. 
#Secondly, we end up with a dataframe and output plot displaying stakelberg, monopoly, and cartel prices for each fuel product

def calculateValues(excelRead, companySales1, companySales2, product, company1, company2, alpha1, beta1, gamma1, alpha2, beta2, gamma2, alphaTotal, betaTotal, gammaTotal, companyProfit1, companyProfit2, companyPrices1, companyPrices2):
    excelReadWeek = excelRead[excelRead.Week == 1] 
    
    brentOilAverageWeeklyProduct = calculateAverageWeeklyBrentCost(excelReadWeek, product)
    dataSalesFinalCp, dataSalesFinalSchelp = selectSales(excelReadWeek, companySales1, companySales2, product)
    dataProfitFinalSchelp, dataProfitFinalCp = selectProfits(excelReadWeek, product, companyProfit1, companyProfit2)
    dataFuelPricesFinalCp, dataFuelPricesFinalSchelp = selectPrices(excelReadWeek, product, companyPrices1, companyPrices2)
       
    averageProfitSchelp = calculateAverageProfitsCompany(dataProfitFinalSchelp, companyProfit1)
    averageProfitCp = calculateAverageProfitsCompany(dataProfitFinalCp, companyProfit2)
       
    averageFuelSalesSchelp = calculateAverageSales(dataSalesFinalSchelp, companySales1)       
    averageFuelSalesCp = calculateAverageSales(dataSalesFinalCp, companySales2) 
    
    averageFuelPricesCp = calculateAveragePricesCompany(dataFuelPricesFinalCp, companyPrices2)
    averageFuelPricesSchelp = calculateAveragePricesCompany(dataFuelPricesFinalSchelp, companyPrices1)
       
    averageRevenuesCp = calculateAverageRevenueCompany(averageFuelSalesCp, averageFuelPricesCp)
    averageRevenuesSchelp = calculateAverageRevenueCompany(averageFuelSalesSchelp, averageFuelPricesSchelp)
       
    numberOfBarrelsSchelp = calculateNumberOfOilBarrels(averageFuelSalesSchelp)
    numberOfBarrelsCp = calculateNumberOfOilBarrels(averageFuelSalesCp)
     
    constantSchelp = calculateConstantCompany(averageFuelSalesSchelp, averageFuelPricesSchelp, averageProfitSchelp, brentOilAverageWeeklyProduct)
    constantCp = calculateConstantCompany(averageFuelSalesCp, averageFuelPricesCp, averageProfitCp, brentOilAverageWeeklyProduct)   
     
    marginalCostSchelp = calculateMarginalCostCompany(constantSchelp, brentOilAverageWeeklyProduct)
    marginalCostCp = calculateMarginalCostCompany(constantCp, brentOilAverageWeeklyProduct)
   
    monopolyPrice = calculateMonopolyPrice(alphaTotal, betaTotal, gammaTotal, marginalCostCp)
    profit = calculateProfit(alphaTotal, betaTotal, gammaTotal, marginalCostCp, monopolyPrice)
       
    priceOneCp = stackelbergPriceOne(alpha1, alpha2, beta1, beta2, gamma1, gamma2, marginalCostCp)
    priceTwoSchelp = stackelbergPriceTwo(alpha1, beta1, gamma1, marginalCostCp, priceOneCp)
       
    dataframe1 = pd.DataFrame()
    stackelbergprices = []
    stackelbergprices.append([priceTwoSchelp, priceOneCp, monopolyPrice, monopolyPrice])
    
    dataframe2 = pd.DataFrame()
    averageprofits = []
    averageprofits.append([averageProfitCp, averageProfitSchelp])
    
    print("\n The results for week:", 1)
    printData(companySales1, companySales2, companyPrices1, companyPrices2, company1, company2, product, averageFuelSalesSchelp, averageFuelSalesCp, averageFuelPricesSchelp, averageFuelPricesCp, numberOfBarrelsSchelp, numberOfBarrelsCp, brentOilAverageWeeklyProduct, monopolyPrice, constantSchelp, constantCp)


    for i in range(2, 51):
        if i == 29:
            continue
        excelReadWeek = excelRead[excelRead.Week == i] 
        brentOilAverageWeeklyProduct = calculateAverageWeeklyBrentCost(excelReadWeek, product)
       
        dataSalesFinalCp, dataSalesFinalSchelp = selectSales(excelReadWeek, companySales1, companySales2, product)
        dataProfitFinalSchelp, dataProfitFinalCp = selectProfits(excelReadWeek, product, companyProfit1, companyProfit2)
        dataFuelPricesFinalCp, dataFuelPricesFinalSchelp = selectPrices(excelReadWeek, product, companyPrices1, companyPrices2)
       
        averageProfitSchelp = calculateAverageProfitsCompany(dataProfitFinalSchelp, companyProfit1)
        averageProfitCp = calculateAverageProfitsCompany(dataProfitFinalCp, companyProfit2)
       
        averageFuelSalesSchelp = calculateAverageSales(dataSalesFinalSchelp, companySales1)       
        averageFuelSalesCp = calculateAverageSales(dataSalesFinalCp, companySales2)
       
        averageFuelPricesCp = calculateAveragePricesCompany(dataFuelPricesFinalCp, companyPrices2)
        averageFuelPricesSchelp = calculateAveragePricesCompany(dataFuelPricesFinalSchelp, companyPrices1)
       
        numberOfBarrelsSchelp = calculateNumberOfOilBarrels(averageFuelSalesSchelp)
        numberOfBarrelsCp = calculateNumberOfOilBarrels(averageFuelSalesCp)
       
        constantSchelp = calculateConstantCompany(averageFuelSalesSchelp, averageFuelPricesSchelp, averageProfitSchelp, brentOilAverageWeeklyProduct)
        constantCp = calculateConstantCompany(averageFuelSalesCp, averageFuelPricesCp, averageProfitCp, brentOilAverageWeeklyProduct)
       
        marginalCostSchelp = calculateMarginalCostCompany(constantSchelp, brentOilAverageWeeklyProduct)
        marginalCostCp = calculateMarginalCostCompany(constantCp, brentOilAverageWeeklyProduct)
          
        cartelprice = calculateCartelPrice(alphaTotal, betaTotal, gammaTotal, marginalCostCp, profit)
        profit = calculateProfit(alphaTotal, betaTotal, gammaTotal, marginalCostCp, cartelprice)
        monopolyPrice = calculateMonopolyPrice(alphaTotal, betaTotal, gammaTotal, marginalCostSchelp)

        priceOneCp = stackelbergPriceOne(alpha1, alpha2, beta1, beta2, gamma1, gamma2, marginalCostCp)
        priceTwoSchelp = stackelbergPriceTwo(alpha1, beta1, gamma1, marginalCostCp, priceOneCp)
        stackelbergprices.append([priceTwoSchelp, priceOneCp, monopolyPrice, cartelprice])
        
        dataframe1 = pd.DataFrame(stackelbergprices, columns=[f'Stackelberg Price Schelp ({product})', f'Stackelberg price CP ({product})', f'Monopoly price of ({product})', f'Cartel price of ({product})'])

        averageprofits.append([averageProfitCp, averageProfitSchelp])
        dataframe2 = pd.DataFrame(averageprofits,columns=[f'Average Total {product} profits CP', f'Average Total {product} profits Schelp'])
        meanProfitCP = dataframe2[f'Average Total {product} profits CP'].mean()
        meanProfitSchelp = dataframe2[f'Average Total {product} profits Schelp' ].mean() 
       
        print("\n The results for week:", i)
        printData(companySales1, companySales2, companyPrices1, companyPrices2, company1, company2, product, averageFuelSalesSchelp, averageFuelSalesCp, averageFuelPricesSchelp, averageFuelPricesCp, numberOfBarrelsSchelp, numberOfBarrelsCp, brentOilAverageWeeklyProduct, monopolyPrice, constantSchelp, constantCp)
        
    
    dataframe1.index += 1
    print(dataframe1)
    
    print(f"The mean {product} profits for CP are:", meanProfitCP)
    print(f"The mean {product} profits for Schelp are: ", meanProfitSchelp)
 
    dataframe1[[f'Stackelberg Price Schelp ({product})', f'Stackelberg price CP ({product})', f'Monopoly price of ({product})', f'Cartel price of ({product})']].plot()
   
    plt.xlabel('Week Number')
    plt.ylabel(f'Price of {product}')
    plt.title(f'The price set for {product} over 50 weeks')
    plt.show()
    
    
###############################################################################################################################################################################

def printData(companySales1, companySales2, companyPrices1, companyPrices2, company1, company2, product, averageFuelSalesSchelp, averageFuelSalesCp, averageFuelPricesSchelp, averageFuelPricesCp, numberOfBarrelsSchelp, numberOfBarrelsCp, brentOilAverageWeeklyProduct, monopolyPrice, constantSchelp, constantCp):
    print(f"The average weekly {companySales1} for {product} is: ", averageFuelSalesSchelp)
    print(f"The average weekly {companySales2} for {product} is: ", averageFuelSalesCp)
    print("**********")
       
    print(f"The average weekly {companyPrices1} for {company1} for {product} is: ", averageFuelPricesSchelp)
    print(f"The average weekly {companyPrices2} for {company2} for {product} is: ", averageFuelPricesCp)
    print("**********")
        
    print(f"The average number of barrels delivered for {company1} of {product} is: ", numberOfBarrelsSchelp)
    print(f"The average number of barrels delivered for {company2} of {product} is: ", numberOfBarrelsCp)
    print("**********")
      
    print(f"The average weekly brent oil price for {product} is: ", brentOilAverageWeeklyProduct)
    print("**********")
         
    print(f"The monopoly price for {product}: ", monopolyPrice)
    print("***********")
           
    print(f"The constant for {product} for Schelp is:", constantSchelp)
    print(f"The constant for {product} for CP is:", constantCp)
    print("***********")
    
###############################################################################################################################################################################

#The stakelbergPriceOne function represents the best price response strategy of the market leader ùëÜ1(ùëÉ2) in response to the followers best strategy response ùëÜ2(ùëÉ1)

def stackelbergPriceOne(alpha1, alpha2, beta1, beta2, gamma1, gamma2, marginalCostCp):
    priceOne = ((-2*alpha1*gamma2)-(beta1*(alpha2+(marginalCostCp*gamma2))))/(2*(((beta1*beta2))-(2*gamma1*gamma2))) + marginalCostCp/2
    stackelbergPriceTwo(alpha1, beta1, gamma1, marginalCostCp, priceOne)
    return priceOne
    
###############################################################################################################################################################################

#The stakelbergPriceTwo function represents the best price response strategy $S_{2}(P_{1})$ of the follower to the initial price set by the market leader.

def stackelbergPriceTwo(alpha2, beta2, gamma2, marginalCost, priceOne):
    priceTwo = ((alpha2 + beta2*priceOne + marginalCost*gamma2) / (2*gamma2))
    return priceTwo
    
###############################################################################################################################################################################    
    
def calculateAverageWeeklyBrentCost(excelReadWeek, product):
    dataBrentOilProduct = excelReadWeek[excelReadWeek.Product == product]
    dataBrentOilProductWeekly = dataBrentOilProduct[['Week', 'Brent oil price (‚Ç¨)']]
    brentOilAverageWeeklyProduct = dataBrentOilProductWeekly['Brent oil price (‚Ç¨)'].mean()
    return brentOilAverageWeeklyProduct  
    
###############################################################################################################################################################################

#This function uses the value ùëêùëúùëõùë†ùë°ùëéùëõùë° and ùêµùëüùëíùëõùë°ùëÇùëñùëô to calculate and return the ùëöùëéùëüùëîùëñùëõùëéùëô ùëêùëúùë†ùë° .

def calculateMarginalCostCompany(constantCompany, brentOilAverageWeeklyProduct):
    marginalCost = constantCompany*brentOilAverageWeeklyProduct /159
    return marginalCost
    
############################################################################################################################################################################### 

def calculateConstantCompany(averageFuelSalesCompany, averageFuelPricesCompany, averageProfitCompany, brentOilAverageWeeklyProduct):
    constant = (((averageFuelPricesCompany*averageFuelSalesCompany) - averageProfitCompany) / averageFuelSalesCompany)*159
    finalConstant = round(constant / brentOilAverageWeeklyProduct, 1)
    return finalConstant
    
###############################################################################################################################################################################

#This function uses the values for ùëéùëôùëù‚Ñéùëé, ùëèùëíùë°ùëé, ùëîùëéùëöùëöùëé and ùëöùëéùëüùëîùëñùëõùëéùëôùëêùëúùë†ùë° to calculate and return the ùëöùëúùëõùëúùëùùëúùëôùë¶ ùëùùëüùëñùëêùëí

def calculateMonopolyPrice(alphaTotal, betaTotal, gammaTotal, marginalCost):
    monopolyPrice = (marginalCost*(betaTotal-gammaTotal)-alphaTotal) / (2*(betaTotal-gammaTotal))
    return monopolyPrice

###############################################################################################################################################################################

#This function uses the values for ùëéùëôùëù‚Ñéùëé, ùëèùëíùë°ùëé, ùëîùëéùëöùëöùëé, ùëöùëéùëüùëîùëñùëõùëéùëôùëêùëúùë†ùë° and ùëùùëüùëñùëêùëí to calculate and return the  ùëùùëüùëúùëìùëñùë°

def calculateProfit(alphaTotal, betaTotal, gammaTotal, marginalCost, price):
    profit = ((price-marginalCost)*(alphaTotal+(betaTotal-gammaTotal)*price))
    return profit
    
###############################################################################################################################################################################

#This function uses the values for ùëéùëôùëù‚Ñéùëé, ùëèùëíùë°ùëé, ùëîùëéùëöùëöùëé, ùëöùëéùëüùëîùëñùëõùëéùëôùëêùëúùë†ùë° and ùëùùëüùëúùëìùëñùë° together with the detection probability ( 0.25 ) and fine ratio ( 0.14 ) to calculate the ùëêùëéùëüùë°ùëíùëô ùëùùëüùëñùëêùëí .  
#ùê∂ùëéùëüùë°ùëíùëô ùëùùëüùëñùëêùëí represents what the price would be taking into account the detection probability and the fine ratio.

def calculateCartelPrice(alphaTotal, betaTotal, gammaTotal, marginalCost, profit): ##mc schelp, but when calling the function is say cp
    cartelPrice = ((0.25*0.14*profit) + (marginalCost*(betaTotal-gammaTotal)) - alphaTotal) / (2*(betaTotal-gammaTotal))
    return cartelPrice  
    
###############################################################################################################################################################################

#This function selects and returns two string variables with each containing all data about the prices for the companies ùëÜùëê‚Ñéùëíùëôùëù and ùê∂ùëÉ for a specified product within the current week.

def selectPrices(excelReadWeek, product, companyPrices1, companyPrices2):
    dataPricesSchelp = excelReadWeek[['Product', companyPrices1]]
    dataPricesCp = excelReadWeek[['Product', companyPrices2]]
    dataPricesFinalSchelp = dataPricesSchelp[dataPricesSchelp.Product == product]       
    dataPricesFinalCp = dataPricesCp[dataPricesCp.Product == product]
    return dataPricesFinalCp, dataPricesFinalSchelp
    
############################################################################################################################################################################### 

def selectProfits(excelReadWeek, product, companyProfit1, companyProfit2):
    dataProfitSchelp = excelReadWeek[['Product', companyProfit1]]
    dataProfitCp = excelReadWeek[['Product', companyProfit2]]  
    dataProfitFinalSchelp = dataProfitSchelp[dataProfitSchelp.Product == product]
    dataProfitFinalCp = dataProfitCp[dataProfitCp.Product == product]
    return dataProfitFinalSchelp, dataProfitFinalCp
    
###############################################################################################################################################################################    

def calculateAverageRevenueCompany(dataSalesCompany, dataPricesFinalCompany):
    averageRevenueCompany = dataSalesCompany*dataPricesFinalCompany
    return averageRevenueCompany
    
###############################################################################################################################################################################

def calculateAveragePricesCompany(dataPricesFinalCompany, companyPrices):
    dataPricesBeforeNa = dataPricesFinalCompany[[companyPrices]]
    dataPricesAfterNa = dataPricesBeforeNa.dropna()
    dataPricesFinalCompany = dataPricesAfterNa[companyPrices].mean()
    return dataPricesFinalCompany
    
###############################################################################################################################################################################

def calculateAverageProfitsCompany(dataProfitsFinalCompany, companyProfit):  
    dataProfitsBeforeNa = dataProfitsFinalCompany[[companyProfit]]
    dataProfitsAfterNa = dataProfitsBeforeNa.dropna()
    dataProfitsFinalCompany = dataProfitsAfterNa[companyProfit].mean()
    return dataProfitsFinalCompany
    
###############################################################################################################################################################################

def selectSales(excelReadWeek, companySales1, companySales2, product):
    dataSalesSchelp = excelReadWeek[['Product', companySales1]]
    dataSalesCp = excelReadWeek[['Product', companySales2]]
    dataSalesFinalSchelp = dataSalesSchelp[dataSalesSchelp.Product == product]       
    dataSalesFinalCp = dataSalesCp[dataSalesCp.Product == product]
    return dataSalesFinalCp, dataSalesFinalSchelp
    
###############################################################################################################################################################################

def calculateNumberOfOilBarrels(averageFuelSales):
    numberOfBarrels = averageFuelSales / 159
    return numberOfBarrels
    
###############################################################################################################################################################################

def calculateAverageSales(dataSalesFinal,companySales):
    dataSalesBeforeNa = dataSalesFinal[[companySales]]        
    dataSalesAfterNa = dataSalesBeforeNa.dropna()        
    dataSalesFinal = dataSalesAfterNa[companySales].mean()
    return dataSalesFinal
    
###############################################################################################################################################################################

(PART D)

###############################################################################################################################################################################

#Pandas tools is used read the data from the excel file. We set a few string variables, for which the product string variable can take strings:  ùê∏ùë¢ùëüùëú ,  ùëÜùë¢ùëùùëíùëü  and  ùê∑ùëñùëíùë†ùëíùëô . 
#The variables are used as arguments when the function  ùëêùëéùëôùëêùë¢ùëôùëéùë°ùëíùë£ùëéùëôùë¢ùëíùë†  is called. 
#The Alpha's, Beta's and Gamma's are the coefficients for the demand fuction for the products. 
#The alphaTotal, betaTotal and gammaTotal are the combined coefficients that are required to calculate the monopoly price and equilibrium price. The "1" indicates company  ùëÜùëê‚Ñéùëíùëôùëù  and the "2" indicates company  ùê∂ùëÉ . 
#Notice that the values for the Alpha's, Beta's and Gamma's change depending on the product of interest, which have to be changed manually.


def main():
    fn = '/Users/markv/Downloads/pyhton/Cartel_data-3.xlsx'
    excelRead = pd.read_excel(fn)
   
    alpha1 = 1.497e+05
    beta1 = 13057.22
    gamma1 = 62177.22
    
    alpha2 = 1.469e+05
    beta2 = 12560.13
    gamma2 = 59810.13
    
    alphaTotal = (alpha1 + alpha2)
    betaTotal = (beta1 + beta2)
    gammaTotal = (gamma1 + gamma2)
    
    company1 = 'Schelp' 
    company2 = 'CP'
    product = 'Super'
    companySales1 = 'Sales_Schelp'
    companySales2 = 'Sales_CP'
    companyPrices1 = 'Price_Schelp'
    companyPrices2 = 'Price_CP'
    companyProfit1 = 'Profit_Schelp'
    companyProfit2 = 'Profit_CP'
    calculateValues(excelRead, companySales1, companySales2, product, company1, company2, alpha1, beta1, gamma1, alpha2, beta2, gamma2, alphaTotal, betaTotal, gammaTotal, companyProfit1, companyProfit2, companyPrices1, companyPrices2)    
main()    

